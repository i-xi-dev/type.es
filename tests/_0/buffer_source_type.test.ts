import { assertStrictEquals } from "../deps.ts";
import { BufferSourceType } from "../../mod.ts";

Deno.test("BufferSourceType.isDataViewConstructor(*)", () => {
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Uint8Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Uint8ClampedArray),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Int8Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Uint16Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Int16Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Uint32Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Int32Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Float32Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Float64Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(BigUint64Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(BigInt64Array),
    false,
  );

  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(DataView),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(null),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isDataViewConstructor(new Uint8Array(0)),
    false,
  );
});

Deno.test("BufferSourceType.isArrayBufferViewConstructor(*)", () => {
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Uint8Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Uint8ClampedArray),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Int8Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Uint16Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Int16Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Uint32Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Int32Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Float32Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Float64Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(BigUint64Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(BigInt64Array),
    true,
  );

  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(DataView),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(null),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isArrayBufferViewConstructor(new Uint8Array(0)),
    false,
  );
});

Deno.test("BufferSourceType.isTypedArrayConstructor(*)", () => {
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Uint8Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Uint8ClampedArray),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Int8Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Uint16Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Int16Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Uint32Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Int32Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Float32Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Float64Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(BigUint64Array),
    true,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(BigInt64Array),
    true,
  );

  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(DataView),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(Array),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(null),
    false,
  );
  assertStrictEquals(
    BufferSourceType.isTypedArrayConstructor(new Uint8Array(0)),
    false,
  );
});
